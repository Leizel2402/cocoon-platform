rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile, and system can read for notifications
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Landlords collection - authenticated users can read, only admins can write
    match /landlords/{landlordId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.token.role == 'landlord_admin' || 
         request.auth.token.role == 'cocoon_admin');
    }
    
    // Properties - public read for listings, authenticated users can write/delete
    match /properties/{propertyId} {
      allow read: if true; // Public read for listings
      allow create, update, delete: if request.auth != null;
    }
    
    // Units - public read for listings, authenticated users can write/delete
    match /units/{unitId} {
      allow read: if true; // Public read for listings
      allow create, update, delete: if request.auth != null;
    }
    
    // Listings - public read, authenticated users can write/delete
    match /listings/{listingId} {
      allow read: if true; // Public read for listings
      allow create, update, delete: if request.auth != null;
    }
    
    // Applications - public read, authenticated users can manage
    match /applications/{applicationId} {
      allow read: if true; // Public read for applications
      allow create, update, delete: if request.auth != null;
    }
    
    // AI Conversations - users can manage their own
    match /ai_conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // Saved Searches - users can manage their own
    match /saved_searches/{searchId} {
      allow read, write: if request.auth != null;
    }
    
    // Favorite Properties - users can manage their own
    match /favorite_properties/{favoriteId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // Saved Properties - users can manage their own
    match /savedProperties/{savedPropertyId} {
      allow read, write: if request.auth != null;
    }
    
    // Saved Properties (alternative naming) - users can manage their own
    match /saved_properties/{savedPropertyId} {
      allow read, write: if request.auth != null;
    }
    
    // Tour Bookings - authenticated users can create and read
    match /tour_bookings/{bookingId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null;
    }
    
    // Contact Submissions - authenticated users can create and read
    match /contact_submissions/{submissionId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
    }
    
    // Rent Payments - users can manage their own
    match /rent_payments/{paymentId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // User Subscriptions - users can manage their own
    match /user_subscriptions/{subscriptionId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // User Messages - users can manage their own
    match /user_messages/{messageId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // User Leases - users can manage their own
    match /user_leases/{leaseId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // Saved Searches (alternative naming) - users can manage their own
    match /savedSearches/{searchId} {
      allow read, write: if request.auth != null;
    }
    
    // Maintenance Requests - public read, authenticated users can manage
    match /maintenance_requests/{requestId} {
      allow read: if true; // Public read for maintenance requests
      allow create, update, delete: if request.auth != null;
    }
    
    // Maintenance Requests (camelCase) - public read, authenticated users can manage
    match /maintenanceRequests/{requestId} {
      allow read: if true; // Public read for maintenance requests
      allow create, update, delete: if request.auth != null;
    }
    
    // Notifications - users can read their own, system can create
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null; // System can create notifications
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid; // Users can mark as read
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid; // Users can delete their notifications
    }
    
    // Subscriptions - users can manage their own, system can create/delete
    match /subscriptions/{subscriptionId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null;
    }
    
    // Payments - authenticated users can read, only Cloud Functions can write
    match /payments/{paymentId} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can write payments
    }
    
    // PII Vault - only server-side access via Cloud Functions
    match /pii_vault/{document} {
      allow read, write: if false; // Only Cloud Functions can access
    }
    
    // Audit log - read-only for authenticated users
    match /audit_log/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
