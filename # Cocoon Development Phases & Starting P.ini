# Cocoon Development Phases & Starting Point (Firebase + React.js)

## 🎯 Project Overview
**Cocoon**: AI-first rental management platform with "Addy" as the conversational assistant across all user personas.
**Tech Stack**: React.js + Firebase + TypeScript

---

## 📋 Phase 1: Foundation (Weeks 1-4)
**Goal**: Secure, scalable foundation with core identity & property management

### Core Deliverables
- ✅ **Authentication & User Management**
  - Firebase Auth setup with custom claims for roles
  - Profile system with 4 personas (Prospect, Renter, Landlord, Employee)
  - Firestore Security Rules for multi-tenant access
  
- ✅ **Database Design & Security**
  - Complete Firestore collections with security rules
  - Audit logging system with Cloud Functions
  - Multi-tenant architecture with proper data isolation
  
- ✅ **Property Management Core**
  - Landlords can create properties, units, and listings
  - Basic property management interface
  - Image upload with Firebase Storage

- ✅ **Basic AI Integration**
  - Addy chat interface foundation
  - Firebase Cloud Functions for AI processing
  - Conversation storage in Firestore

### Technical Stack Setup
```bash
# Frontend: React.js + TypeScript + Vite
npm create vite@latest cocoon-platform -- --template react-ts
cd cocoon-platform

# Firebase SDK
npm install firebase
npm install -g firebase-tools

# UI & Styling
npm install @headlessui/react @heroicons/react
npm install tailwindcss postcss autoprefixer
npm install lucide-react

# Firebase Functions
firebase init functions
cd functions
npm install openai stripe cors express
```

---

## 📋 Phase 2: Core Functionality (Weeks 5-8)
**Goal**: Complete rental flow from prospect to renter

### Core Deliverables
- ✅ **Prospect Journey**
  - AI-powered prequalification with Addy via Cloud Functions
  - Personalized property recommendations
  - Save/compare/share listings with Firestore
  - Tour booking system
  
- ✅ **Application System**
  - Secure application process with PII encryption
  - Stripe integration via Cloud Functions
  - Document upload and management with Firebase Storage
  
- ✅ **Landlord Tools**
  - Application review and management dashboard
  - Communication tools with prospects
  - Basic reporting with Firestore aggregation

- ✅ **Renter Dashboard**
  - Rent payment system via Stripe
  - Document management
  - Basic maintenance requests

---

## 📋 Phase 3: Advanced Features (Weeks 9-12)
**Goal**: Enhanced AI capabilities and operational tools

### Core Deliverables
- ✅ **Advanced AI Features**
  - Multi-model orchestration with Cloud Functions
  - Contextual recommendations using embeddings
  - Smart property matching algorithms
  
- ✅ **Operations & Support**
  - Employee dashboard for Cocoon staff
  - Advanced maintenance management
  - Compliance and audit tools
  
- ✅ **Enhanced Communications**
  - Real-time messaging with Firestore listeners
  - Push notifications with FCM
  - Multi-channel support

---

## 📋 Phase 4: Scale & Polish (Weeks 13-16)
**Goal**: Production readiness and optimization

### Core Deliverables
- ✅ **Performance & Scale**
  - Firestore indexing optimization
  - Cloud Functions performance tuning
  - Caching strategies with Redis
  
- ✅ **Social Integration**
  - Instagram/TikTok property feeds
  - Social sharing features
  
- ✅ **Learning Center**
  - Educational content system
  - AI-powered help system
  
- ✅ **Mobile Preparation**
  - Progressive Web App (PWA) features
  - React Native preparation

---

## 🚀 Getting Started: Firebase + React Setup

### 1. Project Initialization
```bash
# Create React project with Vite
npm create vite@latest cocoon-platform -- --template react-ts
cd cocoon-platform

# Install dependencies
npm install firebase
npm install @headlessui/react @heroicons/react lucide-react
npm install tailwindcss postcss autoprefixer

# Initialize Tailwind
npx tailwindcss init -p

# Firebase CLI setup
npm install -g firebase-tools
firebase login
firebase init
```

### 2. Firebase Project Setup
```bash
# Initialize Firebase project
firebase init

# Select these services:
# ✅ Firestore
# ✅ Functions
# ✅ Hosting  
# ✅ Storage
# ✅ Authentication

# Project structure after init:
# ├── functions/          # Cloud Functions
# ├── firestore.rules     # Security Rules
# ├── firestore.indexes.json
# ├── storage.rules
# └── firebase.json
```

### 3. Environment Variables (.env.local)
```env
# Firebase Config
VITE_FIREBASE_API_KEY=your_api_key
VITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=123456789
VITE_FIREBASE_APP_ID=your_app_id

# OpenAI (for Cloud Functions)
OPENAI_API_KEY=your_openai_key

# Stripe
STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key
STRIPE_SECRET_KEY=your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=your_webhook_secret
```

### 4. Project Structure
```
cocoon-platform/
├── src/
│   ├── components/
│   │   ├── ui/                  # Reusable UI components
│   │   ├── forms/               # Form components
│   │   ├── ai/                  # Addy chat components
│   │   └── dashboard/           # Dashboard components
│   ├── pages/
│   │   ├── auth/                # Authentication pages
│   │   ├── dashboard/           # Role-based dashboards
│   │   │   ├── prospect/
│   │   │   ├── renter/
│   │   │   ├── landlord/
│   │   │   └── employee/
│   │   └── public/              # Public pages
│   ├── hooks/                   # Custom React hooks
│   ├── services/
│   │   ├── firebase/            # Firebase utilities
│   │   ├── ai/                  # AI service calls
│   │   └── stripe/              # Payment utilities
│   ├── types/                   # TypeScript definitions
│   ├── utils/                   # Helper functions
│   └── App.tsx
├── functions/                   # Firebase Cloud Functions
│   ├── src/
│   │   ├── ai/                  # Addy AI handlers
│   │   ├── payments/            # Stripe webhooks
│   │   ├── notifications/       # FCM handlers
│   │   └── index.ts
│   └── package.json
├── firestore.rules             # Security rules
├── firestore.indexes.json      # Database indexes
└── storage.rules               # Storage security rules
```

### 5. Firebase Collections Design

#### Core Collections Structure
```typescript
// Users Collection (maps to Firebase Auth)
interface User {
  uid: string;
  role: 'prospect' | 'renter' | 'landlord_employee' | 'cocoon_employee' | 'landlord_admin' | 'cocoon_admin';
  displayName: string;
  email: string;
  phone?: string;
  landlordId?: string; // for employees and renters
  customClaims?: Record<string, any>;
  createdAt: firebase.firestore.Timestamp;
}

// Landlords Collection
interface Landlord {
  id: string;
  name: string;
  country: string;
  employees: string[]; // user UIDs
  createdAt: firebase.firestore.Timestamp;
}

// Properties Collection  
interface Property {
  id: string;
  landlordId: string;
  name: string;
  address: {
    line1: string;
    line2?: string;
    city: string;
    region: string;
    postalCode: string;
    country: string;
  };
  location: firebase.firestore.GeoPoint;
  socialFeeds?: {
    instagram?: string;
    tiktok?: string;
    youtube?: string;
  };
  createdAt: firebase.firestore.Timestamp;
}

// Applications Collection (with PII security)
interface Application {
  id: string;
  prospectId: string;
  landlordId: string;
  propertyId: string;
  listingId?: string;
  status: 'started' | 'submitted' | 'screening' | 'approved' | 'rejected';
  appFeeCents: number;
  stripePaymentIntentId?: string;
  piiTokens: {
    ssnToken?: string;
    ssnLast4?: string;
  };
  createdAt: firebase.firestore.Timestamp;
  updatedAt: firebase.firestore.Timestamp;
}
```

### 6. Firestore Security Rules
```javascript
// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Landlords and their employees can access their properties
    match /properties/{propertyId} {
      allow read: if true; // Public read for listings
      allow write: if request.auth != null && 
        (request.auth.token.role == 'landlord_admin' || 
         request.auth.token.role == 'landlord_employee') &&
        request.auth.token.landlordId == resource.data.landlordId;
    }
    
    // Applications - prospects can write, landlords can read their properties
    match /applications/{applicationId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.prospectId;
      allow read, update: if request.auth != null && (
        request.auth.uid == resource.data.prospectId ||
        request.auth.token.landlordId == resource.data.landlordId
      );
    }
    
    // PII Vault - only server-side access via Cloud Functions
    match /pii_vault/{document} {
      allow read, write: if false; // Only Cloud Functions can access
    }
    
    // Audit log - read-only for admins
    match /audit_log/{document} {
      allow read: if request.auth != null && 
        request.auth.token.role in ['cocoon_admin', 'cocoon_employee'];
      allow write: if false; // Only Cloud Functions can write
    }
  }
}
```

### 7. Cloud Functions Setup
```typescript
// functions/src/index.ts
import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import OpenAI from 'openai';

admin.initializeApp();
const openai = new OpenAI({ apiKey: functions.config().openai.key });

// Addy AI Chat Function
export const chatWithAddy = functions.https.onCall(async (data, context) => {
  // Verify authentication
  if (!context.auth) {
    throw new functions.https.HttpsError('unauthenticated', 'Must be authenticated');
  }
  
  const { message, persona } = data;
  const userId = context.auth.uid;
  
  try {
    // Get user context from Firestore
    const userDoc = await admin.firestore().doc(`users/${userId}`).get();
    const userData = userDoc.data();
    
    // Create persona-specific prompt
    const systemPrompt = getPersonaPrompt(persona, userData);
    
    // Call OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message }
      ]
    });
    
    // Store conversation in Firestore
    await admin.firestore().collection('ai_conversations').add({
      userId,
      persona,
      messages: [
        { role: 'user', content: message, timestamp: admin.firestore.FieldValue.serverTimestamp() },
        { role: 'assistant', content: response.choices[0].message.content, timestamp: admin.firestore.FieldValue.serverTimestamp() }
      ],
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    return { response: response.choices[0].message.content };
  } catch (error) {
    throw new functions.https.HttpsError('internal', 'AI processing failed');
  }
});

// Stripe Payment Processing
export const processPayment = functions.https.onCall(async (data, context) => {
  // Payment processing logic with Stripe
});

// PII Encryption/Decryption
export const encryptPII = functions.https.onCall(async (data, context) => {
  // PII encryption logic
});
```

### 8. Key Development Priorities

#### Week 1: Firebase Foundation
- [ ] Set up React + Vite project with TypeScript
- [ ] Configure Firebase project (Auth, Firestore, Storage, Functions)
- [ ] Implement Firebase Auth with custom claims
- [ ] Create basic UI components with Tailwind CSS

#### Week 2: Authentication & Profiles
- [ ] Build role-based authentication system
- [ ] Create profile management for all personas
- [ ] Implement Firestore security rules
- [ ] Build persona-specific dashboard shells

#### Week 3: Property Management
- [ ] Property, unit, and listing CRUD with Firestore
- [ ] Image upload with Firebase Storage
- [ ] Basic search and filtering using Firestore queries
- [ ] Landlord property management interface

#### Week 4: AI Integration
- [ ] Deploy Cloud Functions for AI processing
- [ ] Build Addy chat interface component
- [ ] Implement conversation storage in Firestore
- [ ] Create persona-specific AI prompts

---

## 🔐 Security & Compliance with Firebase

### Firebase-Specific Security
- [ ] Firestore Security Rules for multi-tenant access
- [ ] Custom claims for role-based authentication
- [ ] Cloud Functions for sensitive operations (PII handling)
- [ ] Firebase Storage rules for file access control
- [ ] Audit logging via Cloud Functions triggers

### Compliance Features
- [ ] GDPR data handling with Firestore
- [ ] Field-level encryption for PII via Cloud Functions
- [ ] Secure data deletion processes
- [ ] Audit trail using Firestore triggers
- [ ] Rate limiting on Cloud Functions

---

## 📊 Firebase Advantages for Cocoon

### Why Firebase Works Well
- **Real-time Features**: Firestore real-time listeners for chat/notifications
- **Scalability**: Auto-scaling Cloud Functions and Firestore
- **Security**: Built-in authentication and security rules
- **Multi-platform**: Easy React Native migration later
- **AI Integration**: Cloud Functions perfect for AI orchestration
- **Global**: Built-in multi-region support

### Performance Optimizations
- Firestore compound indexes for complex queries
- Cloud Functions with proper memory allocation
- Firebase Storage with CDN for images
- Firestore offline persistence for mobile

---

## 🛠 Technology Stack Summary (Updated)

| Layer | Technology | Purpose |
|-------|------------|---------|
| **Frontend** | React.js + Vite, TypeScript | Fast development, type safety |
| **Styling** | Tailwind CSS | Responsive, utility-first design |
| **Database** | Firebase Firestore | NoSQL, real-time, scalable |
| **Auth** | Firebase Auth | Role-based authentication |
| **Backend** | Firebase Cloud Functions | Serverless, auto-scaling |
| **AI** | OpenAI GPT-4/5 via Cloud Functions | Addy conversational assistant |
| **Payments** | Stripe via Cloud Functions | Secure payment processing |
| **Storage** | Firebase Storage | File and media management |
| **Hosting** | Firebase Hosting | Global CDN deployment |
| **Notifications** | Firebase Cloud Messaging | Push notifications |

---

## 📞 Next Steps

1. **Initialize Firebase project** and React app using the setup above
2. **Configure authentication** with custom claims for roles
3. **Design Firestore collections** and security rules
4. **Implement Phase 1 core features** following the timeline
5. **Deploy Cloud Functions** for AI and payment processing
6. **Regular security reviews** at each phase completion

This Firebase-based approach provides excellent scalability, real-time capabilities, and seamless integration with AI services while maintaining the security and compliance requirements outlined in your specifications.